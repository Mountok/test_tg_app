import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FiArrowLeft } from 'react-icons/fi';
import { BsCheckCircle, BsXCircle } from 'react-icons/bs';
import { LuUpload } from 'react-icons/lu';
import './WithdrawPage.css';
import { useI18n } from '../../i18n/I18nProvider.jsx';
import { GetBalanceUSDT, GetWallet, SendWithdrawRequest } from '../../utils/wallet';
import { TelegramInfo } from '../../utils/auth';

const WithdrawPage = ({ telegramID }) => {
  const navigate = useNavigate();
  const { t } = useI18n();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [address, setAddress] = useState('');
  const [amount, setAmount] = useState('');
  const [balance, setBalance] = useState(0);
  const [walletAddr, setWalletAddr] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [addressValid, setAddressValid] = useState(null);
  const [amountValid, setAmountValid] = useState(null);
  const [addressError, setAddressError] = useState('');
  const [amountError, setAmountError] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
  const [loading, setLoading] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [step, setStep] = useState(0); // 0 - —Ñ–æ—Ä–º–∞, 1 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, 2 - –æ–±—Ä–∞–±–æ—Ç–∫–∞, 3 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const [progress, setProgress] = useState(0); // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  const MIN_WITHDRAWAL = 10.0;
  const SYSTEM_COMMISSION = 1.99;
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadUserBalance();
  }, [telegramID]);
  
  const loadUserBalance = async () => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ Telegram WebApp
      const getTelegramId = () => {
        // –ò–∑ Telegram WebApp
        if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
          return window.Telegram.WebApp.initDataUnsafe.user.id;
        }
        // Fallback –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        return telegramID;
      };
      
      const currentTelegramId = getTelegramId();
      console.log('[WithdrawPage] –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID:', currentTelegramId);
      
      const walletRes = await GetWallet(currentTelegramId);
      const addr = walletRes.data.address;
      setWalletAddr(addr);
      
      const balanceRes = await GetBalanceUSDT(currentTelegramId, addr);
      setBalance(balanceRes.available_balance || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      setBalance(0);
    } finally {
      setLoading(false);
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è TRON –∞–¥—Ä–µ—Å–∞
  const validateTronAddress = (addr) => {
    if (!addr) {
      setAddressError('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      setAddressValid(false);
      return false;
    }
    
    if (!addr.startsWith('T')) {
      setAddressError('TRON –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "T"');
      setAddressValid(false);
      return false;
    }
    
    if (addr.length !== 34) {
      setAddressError('TRON –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞');
      setAddressValid(false);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Base58
    const base58Pattern = /^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/;
    if (!base58Pattern.test(addr)) {
      setAddressError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TRON –∞–¥—Ä–µ—Å–∞');
      setAddressValid(false);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    if (addr === walletAddr) {
      setAddressError('–ù–µ–ª—å–∑—è –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å');
      setAddressValid(false);
      return false;
    }
    
    setAddressError('');
    setAddressValid(true);
    return true;
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
  const validateAmount = (amt) => {
    const numAmount = parseFloat(amt);
    
    if (!amt || isNaN(numAmount)) {
      setAmountError('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞');
      setAmountValid(false);
      return false;
    }
    
    if (numAmount < MIN_WITHDRAWAL) {
      setAmountError(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_WITHDRAWAL.toFixed(2)} USDT`);
      setAmountValid(false);
      return false;
    }
    
    if (numAmount > balance) {
      setAmountError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      setAmountValid(false);
      return false;
    }
    
    const userReceives = numAmount - SYSTEM_COMMISSION;
    if (userReceives <= 0) {
      setAmountError('–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏');
      setAmountValid(false);
      return false;
    }
    
    setAmountError('');
    setAmountValid(true);
    return true;
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleAddressChange = (e) => {
    const value = e.target.value.trim();
    setAddress(value);
    if (value) {
      validateTronAddress(value);
    } else {
      setAddressValid(null);
      setAddressError('');
    }
  };
  
  const handleAmountChange = (e) => {
    let value = e.target.value;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–¥–Ω—É —Ç–æ—á–∫—É
    value = value.replace(/[^0-9.]/g, '');
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–æ—á–∫—É
    const parts = value.split('.');
    if (parts.length > 2) {
      value = parts[0] + '.' + parts[1];
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (parts[1] && parts[1].length > 2) {
      value = parts[0] + '.' + parts[1].substring(0, 2);
    }
    
    setAmount(value);
    if (value) {
      validateAmount(value);
    } else {
      setAmountValid(null);
      setAmountError('');
    }
  };
  
  // –†–∞—Å—á–µ—Ç —Å—É–º–º
  const calculateAmounts = () => {
    const requestedAmount = parseFloat(amount) || 0;
    const userReceives = Math.max(0, requestedAmount - SYSTEM_COMMISSION);
    
    return {
      requested: requestedAmount,
      commission: SYSTEM_COMMISSION,
      userReceives: userReceives
    };
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = () => {
    if (!validateTronAddress(address) || !validateAmount(amount)) {
      return;
    }
    
    setStep(1); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
  };
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
  const confirmWithdraw = async () => {
    try {
      setStep(2); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
      setProcessing(true);
      setProgress(0); // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id (–∫–∞–∫ –≤ loadUserBalance)
      const getTelegramId = () => {
        if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
          return window.Telegram.WebApp.initDataUnsafe.user.id;
        }
        return telegramID;
      };
      
      const currentTelegramId = getTelegramId();
      console.log('[WithdrawPage] –í—ã–≤–æ–¥ –¥–ª—è Telegram ID:', currentTelegramId);
      
      // –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
      const result = await SendWithdrawRequest(
        currentTelegramId,
        walletAddr, // from_address - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        address,    // to_address - –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        parseFloat(amount)
      );
     
      
      console.log('[WithdrawPage] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∞:', result);
      
      setProgress(100); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      setTimeout(() => {
        setStep(3); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        setProcessing(false);
      }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:', error);
      setProcessing(false);
      setProgress(0);
      setStep(0); // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–æ—Ä–º–µ
      alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };
  
  const { requested, commission, userReceives } = calculateAmounts();
  
  // –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –≤—ã–≤–æ–¥–∞
  const renderWithdrawForm = () => (
    <div className="withdraw-form">
      <div className="withdraw-header">
        <button className="back-btn" onClick={() => navigate('/')}>
          <FiArrowLeft />
        </button>
        <h1 className="withdraw-title">üí∏ {t('withdraw.title') || '–í—ã–≤–æ–¥ USDT'}</h1>
        <div></div>
      </div>
      
      <div className="withdraw-balance">
        <div className="balance-card">
          <p className="balance-label">üí∞ {t('withdraw.availableBalance') || '–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å'}</p>
          <p className="balance-amount">{balance.toFixed(2)} USDT</p>
        </div>
      </div>
      
      <div className="withdraw-fields">
        {/* –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è */}
        <div className="field-group">
          <label className="field-label">üìç {t('withdraw.recipientAddress') || '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è'}</label>
          <div className={`field-input-wrapper ${addressValid === true ? 'valid' : addressValid === false ? 'invalid' : ''}`}>
            <input
              type="text"
              className="field-input"
              placeholder="TXxxxxxxxxxxxxxxxxxxxxxxxxxx"
              value={address}
              onChange={handleAddressChange}
            />
            {addressValid === true && <BsCheckCircle className="validation-icon valid" />}
            {addressValid === false && <BsXCircle className="validation-icon invalid" />}
          </div>
          {addressValid === true && <p className="validation-message valid">‚úÖ –í–∞–ª–∏–¥–Ω—ã–π TRON –∞–¥—Ä–µ—Å</p>}
          {addressError && <p className="validation-message invalid">‚ùå {addressError}</p>}
        </div>
        
        {/* –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ */}
        <div className="field-group">
          <label className="field-label">üíµ {t('withdraw.amount') || '–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞'}</label>
          <div className={`field-input-wrapper ${amountValid === true ? 'valid' : amountValid === false ? 'invalid' : ''}`}>
            <input
              type="text"
              className="field-input"
              placeholder="50.00"
              value={amount}
              onChange={handleAmountChange}
            />
            <span className="field-currency">USDT</span>
          </div>
          <p className="field-hint">‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: {MIN_WITHDRAWAL.toFixed(2)} USDT</p>
          {amountError && <p className="validation-message invalid">‚ùå {amountError}</p>}
        </div>
      </div>
      
      {/* –†–∞—Å—á–µ—Ç */}
      {amount && parseFloat(amount) >= MIN_WITHDRAWAL && (
        <div className="withdraw-calculation">
          <div className="calculation-header">üìä –†–ê–°–ß–ï–¢</div>
          <div className="calculation-row">
            <span>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</span>
            <span>{requested.toFixed(2)} USDT</span>
          </div>
          <div className="calculation-row">
            <span>–ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:</span>
            <span>-{commission.toFixed(2)} USDT</span>
          </div>
          <div className="calculation-row">
            <span>TRX –¥–ª—è –≥–∞–∑–∞:</span>
            <span>–∑–∞ –Ω–∞—à —Å—á–µ—Ç</span>
          </div>
          <div className="calculation-divider"></div>
          <div className="calculation-row total">
            <span>üíé –í—ã –ø–æ–ª—É—á–∏—Ç–µ:</span>
            <span>{userReceives.toFixed(2)} USDT</span>
          </div>
        </div>
      )}
      
      <div className="withdraw-actions">
        <button 
          className={`withdraw-btn ${addressValid && amountValid ? 'enabled' : 'disabled'}`}
          onClick={handleSubmit}
          disabled={!addressValid || !amountValid || loading}
        >
          {loading ? 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ ' + (t('withdraw.submit') || '–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞')}
        </button>
        <p className="withdraw-info">
          ‚ÑπÔ∏è {t('withdraw.processingTime') || '–ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç'}
        </p>
      </div>
    </div>
  );
  
  // –†–µ–Ω–¥–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const renderConfirmation = () => (
    <div className="withdraw-confirmation">
      <div className="confirm-header">
        <button className="back-btn" onClick={() => setStep(0)}>
          <FiArrowLeft />
        </button>
        <h1 className="confirm-title">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞</h1>
        <div></div>
      </div>
      
      <div className="confirm-details">
        <div className="confirm-section">
          <h3>üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</h3>
          <p className="confirm-address">{address}</p>
        </div>
        
        <div className="confirm-section">
          <h3>üí∞ –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:</h3>
          <div className="confirm-calculation">
            <div className="confirm-row">
              <span>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</span>
              <span>{requested.toFixed(2)} USDT</span>
            </div>
            <div className="confirm-row">
              <span>–ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:</span>
              <span>-{commission.toFixed(2)} USDT</span>
            </div>
            <div className="confirm-divider"></div>
            <div className="confirm-row total">
              <span>–í—ã –ø–æ–ª—É—á–∏—Ç–µ:</span>
              <span>{userReceives.toFixed(2)} USDT</span>
            </div>
          </div>
        </div>
      </div>
      
      <div className="confirm-actions">
        <button className="confirm-btn" onClick={confirmWithdraw}>
          üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥
        </button>
        <button className="cancel-btn" onClick={() => setStep(0)}>
          ‚ùå –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </div>
  );
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ñ—É–Ω–∫—Ü–∏—è)
  const getProgressStep = (progress) => {
    if (progress < 25) return { text: "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...", bars: "‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë", percent: Math.round(progress) };
    if (progress < 50) return { text: "üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...", bars: "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë", percent: Math.round(progress) };
    if (progress < 80) return { text: "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...", bars: "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë", percent: Math.round(progress) };
    if (progress < 100) return { text: "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...", bars: "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", percent: Math.round(progress) };
    return { text: "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", bars: "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", percent: 100 };
  };

  // useEffect –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    if (step === 2 && processing) {
      const interval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 100) return 100;
          return prev + Math.random() * 15;
        });
      }, 800);
      
      return () => clearInterval(interval);
    }
  }, [step, processing]);
  
  // –†–µ–Ω–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const renderProcessing = () => {
    const currentStep = getProgressStep(progress);
    
    return (
      <div className="withdraw-processing">
        <div className="processing-header">
          <h1 className="processing-title">üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å</h1>
        </div>
        
        <div className="processing-progress">
          <div className="progress-step">
            <div className="progress-text">{currentStep.text}</div>
            <div className="progress-bars">{currentStep.bars} {currentStep.percent}%</div>
          </div>
        </div>
        
        <div className="processing-info">
          <p>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</p>
          <p>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</p>
        </div>
      </div>
    );
  };
  
  // –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const renderResult = () => (
    <div className="withdraw-result">
      <div className="result-header">
        <h1 className="result-title">‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!</h1>
      </div>
      
      <div className="result-details">
        <div className="result-icon">‚è≥</div>
        <p className="result-message">
          –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.
        </p>
        
        <div className="result-summary">
          <div className="summary-row">
            <span>–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:</span>
            <span>{userReceives.toFixed(2)} USDT</span>
          </div>
          <div className="summary-row">
            <span>–ö–æ–º–∏—Å—Å–∏—è:</span>
            <span>{commission.toFixed(2)} USDT</span>
          </div>
          <div className="summary-row">
            <span>–ù–∞ –∞–¥—Ä–µ—Å:</span>
            <span className="address-short">{address.slice(0, 8)}...{address.slice(-8)}</span>
          </div>
        </div>
      </div>
      
      <div className="result-actions">
        <button className="result-btn" onClick={() => navigate('/')}>
          üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
        <button className="result-btn secondary" onClick={() => {
          setStep(0);
          setAddress('');
          setAmount('');
          setAddressValid(null);
          setAmountValid(null);
          setAddressError('');
          setAmountError('');
          setProgress(0);
          setProcessing(false);
          loadUserBalance();
        }}>
          üîÑ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥
        </button>
      </div>
    </div>
  );
  
  if (loading) {
    return (
      <div className="withdraw-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...</p>
      </div>
    );
  }
  
  return (
    <div className="withdraw-page">
      {step === 0 && renderWithdrawForm()}
      {step === 1 && renderConfirmation()}
      {step === 2 && renderProcessing()}
      {step === 3 && renderResult()}
    </div>
  );
};

export default WithdrawPage;
