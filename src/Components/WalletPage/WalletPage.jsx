import { useEffect, useState } from "react";
import { ethers } from "ethers";
import "./WalletPage.css";
import { IoNotifications } from "react-icons/io5";
import { BsQrCodeScan } from "react-icons/bs";
import { useNavigate } from "react-router-dom";
import { CreateWallet, GetBalance } from "../../utils/wallet.js";
import { GoPlus } from "react-icons/go";
import { LuDownload } from "react-icons/lu";
import TransferItem from "../TransferItem/TransferItem.jsx";

// üß© –î–æ–±–∞–≤–ª—è–µ–º Telegram SDK
import { init, miniApp } from "@telegram-apps/sdk";

export default function WalletPage() {
    const [username, setUsername] = useState("Islam");
    const [telegramId, setTelegramId] = useState(null);
    const navigateTo = useNavigate();
    const [address, setAddress] = useState();
    const [balance, setBalance] = useState();
    const [idBalanceCreated, setIsBalanceCreated] = useState(false);

    useEffect(() => {
        const initializeTelegram = async () => {
          try {
            await init();
      
            if (!window.Telegram.WebApp?.initDataUnsafe?.user) {
              alert("–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram, –∏–Ω–∞—á–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–∏–º");
              console.warn("–ù–µ—Ç user-–¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram");
              return;
            }
      
            const user = window.Telegram.WebApp.initDataUnsafe.user;
            const id = user.id;
            const name = user.username || user.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏";
      
            localStorage.setItem("telegramId", id.toString());
            localStorage.setItem("nickname", name);
      
            setTelegramId(id);
            setUsername(name);
          } catch (e) {
            alert("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:",JSON.stringify(e));
            console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:", e);
          }
        };
      
        initializeTelegram();
      }, []);

    useEffect(() => {
        GetBalance().then(res => {
            if (res.balances == null) {
                console.log("–ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω");
                setIsBalanceCreated(false);
            } else {
                console.log("–ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω");
                setIsBalanceCreated(true);
                setAddress(localStorage.getItem("address_platapay"));
                setBalance(res.balances);
            }
        }).catch(err => console.log(err));
    }, []);

    const handleBalanceCreate = () => {
        CreateWallet().then(res => {
            console.log(res.data);
            localStorage.setItem("address_platapay", res.data.address);
            localStorage.setItem("privat_key_platapay", res.data.private_key);
            window.location.reload();
        }).catch(err => console.log(err));
    };

    return (
        <div className="wallet-container_main_title">
            <div className="wallet-container_header">
                <div className="wallet-container_header_top">
                    <div className="wallet-container_header_top_user">
                        <div className="wallet-container_header_top_user_name">
                            <p>–î–æ–±—Ä—ã–π –¥–µ–Ω—å,</p>
                            <p>{username} {telegramId}</p>
                        </div>
                    </div>
                    <div className="wallet-container_header_top_settings">
                        <IoNotifications />
                    </div>
                </div>

                <div className="wallet-container_header_balance">
                    <div className="wallet-container_header_balance_top">
                        {idBalanceCreated ?
                            <p><span>–ú–æ–π –∫–æ—à–µ–ª–µ–∫ {address} </span></p>
                            :
                            <p><span>–°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: </span>
                                <div className="wallet-container_header_balance_top_plus" onClick={handleBalanceCreate}>
                                    <GoPlus />
                                </div>
                            </p>
                        }
                    </div>
                    <div className="wallet-container_header_balance_bottom">
                        <p>–ë–∞–ª–∞–Ω—Å –≤ USDT</p>
                        <p>{balance ? `$${balance}` : "$0.0"}</p>
                    </div>
                </div>

                <div className="wallet-container_header_buttons">
                    <button className="wallet-container_header_button_send">
                        <LuDownload />
                        <p>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</p>
                    </button>
                    <button onClick={() => navigateTo("/scanner")} className="wallet-container_header_button_qr">
                        <BsQrCodeScan />
                        <p>–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ QR</p>
                    </button>
                </div>
            </div>

            <div className="wallet-container_history">
                <div className="wallet-container_history_title">
                    <p>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</p>
                    <p>–í—Å—è –∏—Å—Ç–æ—Ä–∏—è</p>
                </div>
                <div className="wallet-container_main_history">
                    <TransferItem date={"20.01.25"} amount={100} />
                    <TransferItem date={"20.01.25"} amount={100} />
                </div>
            </div>
        </div>
    );
}
