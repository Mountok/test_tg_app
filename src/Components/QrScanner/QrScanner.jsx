// src/Components/QrScanner/QrScanner.jsx

import { useRef, useState, useEffect } from 'react';
import { BrowserMultiFormatReader } from '@zxing/library';
import './QrScanner.css';
import PaymentModal from '../PaymentModal/PaymentModal';
import { ConvertRUBToUSDT } from '../../utils/convert';
import { processQRImage, getCameraConstraints, getQRSupportInfo } from '../../utils/qrProcessor';
import { useNavigate } from 'react-router-dom';
import { MdFlashlightOn, MdFlashlightOff } from 'react-icons/md';
import { FiImage } from 'react-icons/fi';
import { RxCross2 } from 'react-icons/rx';
import { BsCamera } from 'react-icons/bs';
import { FiAlertTriangle } from 'react-icons/fi';
import { useI18n } from '../../i18n/I18nProvider.jsx';

const QrScanner = ({telegramID}) => {
  const videoRef = useRef(null);
  const fileInputRef = useRef(null);
  const navigate = useNavigate();
  const { t } = useI18n();

  const [scanning, setScanning] = useState(false);
  const [qrLink, setQrLink] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [modalData, setModalData] = useState({ amountRub: 0, amountUsdt: 0 });
  const [flashlight, setFlashlight] = useState(false);
  const [showNoDetectModal, setShowNoDetectModal] = useState(false);
  const [modalLeaving, setModalLeaving] = useState(false);
  const [reader, setReader] = useState(null);
  const [stream, setStream] = useState(null);
  const [processingImage, setProcessingImage] = useState(false);
  const [supportInfo, setSupportInfo] = useState(null);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    setSupportInfo(getQRSupportInfo());
    console.log('[QR] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:', getQRSupportInfo());
  }, []);

  // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleDecoded = async (decodedText, isImage = false) => {
    const startTime = Date.now();
    console.log(`[QR] üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –¢–∏–ø: ${isImage ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–∫–∞–º–µ—Ä–∞'}`);

    setProcessingImage(false);

    if (isImage) {
      console.log('[QR] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ dataURL');
      console.log('[QR] üì∑ DataURL –ø–æ–ª—É—á–µ–Ω:', decodedText.substring(0, 100) + '...');
      console.log('[QR] üìä –î–ª–∏–Ω–∞ dataURL:', decodedText.length, '—Å–∏–º–≤–æ–ª–æ–≤');
      setQrLink(decodedText);
      setModalData({ amountRub: 0, amountUsdt: 0 });
      setShowModal(true);
      console.log(`[QR] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${Date.now() - startTime}ms`);
      return;
    }

    console.log('[QR] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω QR-–∫–æ–¥ –∏–∑ –∫–∞–º–µ—Ä—ã');
    console.log('[QR] üîó –°–æ–¥–µ—Ä–∂–∏–º–æ–µ QR-–∫–æ–¥–∞:', decodedText);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
    if (decodedText.startsWith('http://') || decodedText.startsWith('https://')) {
      console.log('[QR] üåê –¢–∏–ø —Å—Å—ã–ª–∫–∏: HTTP/HTTPS URL');
    } else if (decodedText.startsWith('bitcoin:') || decodedText.startsWith('ethereum:')) {
      console.log('[QR] ‚Çø –¢–∏–ø —Å—Å—ã–ª–∫–∏: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–¥—Ä–µ—Å');
    } else if (decodedText.includes('@') && decodedText.includes('.')) {
      console.log('[QR] üìß –¢–∏–ø —Å—Å—ã–ª–∫–∏: Email –∞–¥—Ä–µ—Å');
    } else {
      console.log('[QR] ‚ùì –¢–∏–ø —Å—Å—ã–ª–∫–∏: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    }

    setQrLink(decodedText);
    try {
      console.log('[QR] üí∞ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é RUB –≤ USDT...');
      const convertStartTime = Date.now();
      const resp = await ConvertRUBToUSDT(decodedText);
      console.log(`[QR] üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${Date.now() - convertStartTime}ms`);
      console.log('[QR] üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', {
        amountRub: resp.amountRub,
        amountUsdt: resp.amountUsdt
      });
      setModalData({ amountRub: resp.amountRub, amountUsdt: resp.amountUsdt });
    } catch (error) {
      console.log('[QR] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error.message);
      setModalData({ amountRub: 0, amountUsdt: 0 });
    }
    setShowModal(true);
    console.log(`[QR] üéâ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Date.now() - startTime}ms`);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleScanSuccess = (result) => {
    if (result && result.getText()) {
      const scanTime = Date.now();
      console.log('[QR] üì± –ö–∞–º–µ—Ä–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞ QR-–∫–æ–¥');
      console.log('[QR] üîç ZXing —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', result.getText());
      console.log('[QR] üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ QR-–∫–æ–¥–∞:', result.getText().length, '—Å–∏–º–≤–æ–ª–æ–≤');

      // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ZXing
      console.log('[QR] üìã –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', {
        timestamp: new Date(scanTime).toISOString(),
        hasText: !!result.getText(),
        textLength: result.getText().length,
        barcodeFormat: result.getBarcodeFormat?.() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
      });

      stopScanner();
      console.log('[QR] üõë –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–¥–∞—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É');
      handleDecoded(result.getText());
    } else {
      console.log('[QR] ‚ö†Ô∏è ZXing –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleScanError = (error) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ NotFoundException - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (error.name === 'NotFoundException' || error.name === 'NotFoundException2') {
      return;
    }
    console.log('[QR] –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.name, error.message);
  };

  // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è iOS
  const startScanner = async () => {
    if (scanning) return;

    console.log('[QR] üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞');
    const startTime = Date.now();

    setScanning(true);
    setShowNoDetectModal(false);

    try {
      console.log('[QR] üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ZXing BrowserMultiFormatReader');
      const codeReader = new BrowserMultiFormatReader();
      setReader(codeReader);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
      console.log('[QR] ‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã');
      const videoConstraints = getCameraConstraints();
      console.log('[QR] üì∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã:', videoConstraints);

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
      console.log('[QR] üé• –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
      const cameraAccessStart = Date.now();
      const mediaStream = await navigator.mediaDevices.getUserMedia(videoConstraints);
      console.log(`[QR] ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Date.now() - cameraAccessStart}ms`);

      setStream(mediaStream);

      if (videoRef.current) {
        console.log('[QR] üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
        videoRef.current.srcObject = mediaStream;
        console.log('[QR] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ');
        await videoRef.current.play();
        console.log('[QR] ‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log('[QR] üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ ZXing');
      console.log('[QR] üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–∞–º–µ—Ä–∞');
      await codeReader.decodeFromVideoDevice(
        undefined, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞–º–µ—Ä—É
        videoRef.current,
        handleScanSuccess,
        handleScanError
      );
      console.log(`[QR] üéØ ZXing —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∑–∞ ${Date.now() - startTime}ms`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω QR
      setTimeout(() => {
        if (scanning) {
          setShowNoDetectModal(true);
        }
      }, 15000);

    } catch (error) {
      console.error('[QR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:', error);
      setScanning(false);
      alert(t('qr.cameraAccessError') || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
  const stopScanner = () => {
    setScanning(false);
    setShowNoDetectModal(false);
    
    if (reader) {
      try {
        reader.reset();
      } catch (error) {
        console.log('[QR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ reader:', error);
      }
    }
    
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      setStream(null);
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      stopScanner();
    };
  }, []);

  // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Ç–∏–ª–∏—Ç—ã
  const handleFileChange = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    console.log('[QR] üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–∑ –≥–∞–ª–µ—Ä–µ–∏');
    console.log('[QR] üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
      name: file.name,
      size: file.size,
      type: file.type,
      lastModified: new Date(file.lastModified).toISOString()
    });

    const processStartTime = Date.now();
    setProcessingImage(true);

    try {
      console.log('[QR] üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É processQRImage');
      console.log('[QR] ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
        enableBackendFallback: false,
        maxAttempts: 8,
        skipZXingOnIOS: true
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const qrProcessStart = Date.now();
      const qrCode = await processQRImage(file, {
        enableBackendFallback: false, // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –±—ç–∫–µ–Ω–¥
        maxAttempts: 8,
        skipZXingOnIOS: true
      });

      console.log(`[QR] üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${Date.now() - qrProcessStart}ms`);

      if (qrCode) {
        console.log('[QR] ‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:', qrCode);
        handleDecoded(qrCode);
      } else {
        console.log('[QR] ‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ dataURL');
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º dataURL
        const reader = new FileReader();
        reader.onload = () => {
          console.log('[QR] üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ dataURL');
          handleDecoded(reader.result, true);
        };
        reader.readAsDataURL(file);
      }
    } catch (error) {
      console.error('[QR] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      console.error('[QR] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      alert(t('qr.imageProcessError') || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      setProcessingImage(false);
    }

    console.log(`[QR] üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${Date.now() - processStartTime}ms`);

    // —Å–±—Ä–æ—Å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
    e.target.value = '';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞
  const toggleFlashlight = async () => {
    console.log('[QR] üí° –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞');

    if (!stream) {
      console.log('[QR] ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–æ–º');
      return;
    }

    try {
      const track = stream.getVideoTracks()[0];
      console.log('[QR] üìπ –ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ—Ç—Ä–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–æ–º');

      const capabilities = track.getCapabilities();
      console.log('[QR] ‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã:', capabilities);

      if (!capabilities.torch) {
        console.log('[QR] ‚ùå –§–æ–Ω–∞—Ä–∏–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        alert(t('qr.flashNotSupported') || '–§–æ–Ω–∞—Ä–∏–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        return;
      }

      const newTorchState = !flashlight;
      console.log(`[QR] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ–Ω–∞—Ä–∏–∫–∞: ${flashlight} ‚Üí ${newTorchState}`);

      await track.applyConstraints({
        advanced: [{ torch: newTorchState }]
      });

      setFlashlight(f => !f);
      console.log(`[QR] ‚úÖ –§–æ–Ω–∞—Ä–∏–∫ ${newTorchState ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} —É—Å–ø–µ—à–Ω–æ`);

    } catch (e) {
      console.error('[QR] üí• –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞:', e);
      console.error('[QR] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞:', {
        name: e.name,
        message: e.message,
        stack: e.stack
      });
      alert(t('qr.flashToggleError') || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–∞—Ä–∏–∫');
    }
  };

  // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –¥–ª—è "QR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
  const handleCloseNoDetectModal = () => {
    setModalLeaving(true);
    setTimeout(() => {
      setShowNoDetectModal(false);
      setModalLeaving(false);
    }, 350);
  };

  return (
    <div className="qr-container">
      {/* –ú–æ–¥–∞–ª–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º */}
      <PaymentModal
        telegramID={telegramID}
        qrLink={qrLink}
        visible={showModal}
        data={modalData}
        onClose={() => {
          setShowModal(false);
          setQrLink('');
          setModalData({ amountRub: 0, amountUsdt: 0 });
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
          stopScanner();
        }}
      />

      {/* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ */}
      {showNoDetectModal && (
        <div className={`qr-nodetect-modal${modalLeaving ? ' leaving' : ''}`}>
          <FiAlertTriangle size={32} color="#e74c3c" style={{ marginRight: 10 }} />
          <span style={{ flex: 1 }}>
            {t('qr.notDetected') || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ.'}
          </span>
          <button className="qr-nodetect-close" onClick={handleCloseNoDetectModal}>
            <RxCross2 size={24} color="#fff" />
          </button>
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {processingImage && (
        <div className="qr-processing-modal">
          <div className="qr-processing-spinner"></div>
          <span>{t('qr.processing') || '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'}</span>
        </div>
      )}

      {/* –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞–º–µ—Ä—ã */}
      <video
        ref={videoRef}
        className="qr-camera-video"
        autoPlay
        playsInline
        muted
      />

      {/* –û–≤–µ—Ä–ª–µ–π, —Ä–∞–º–∫–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏—è */}
      <div className="qr-overlay">
        <p className="qr-hint">
          {t('qr.hint') || '–ú–æ–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ —Å –∫–∞–º–µ—Ä—ã –∏–ª–∏ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏'}
        </p>
        <div className="qr-highlight-box">
          <div className="qr-corner top-left" />
          <div className="qr-corner top-right" />
          <div className="qr-corner bottom-left" />
          <div className="qr-corner bottom-right" />
          <div className="qr-scan-line" />
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="qr-buttons" style={{ justifyContent: 'center', gap: '48px' }}>
        {/* –§–æ–Ω–∞—Ä–∏–∫ */}
        <button
          type="button"
          className="qr-icon-btn"
          onClick={toggleFlashlight}
          aria-label="–§–æ–Ω–∞—Ä–∏–∫"
          disabled={!scanning}
        >
          {flashlight ? (
            <MdFlashlightOn size={32} color={scanning ? '#fff' : '#888'} />
          ) : (
            <MdFlashlightOff size={32} color={scanning ? '#fff' : '#888'} />
          )}
        </button>
        {/* –ö–∞–º–µ—Ä–∞ */}
        <button
          type="button"
          className="qr-icon-btn"
          onClick={scanning ? stopScanner : startScanner}
          aria-label={scanning ? (t('qr.stopCamera') || '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–µ—Ä—É') : (t('qr.startCamera') || '–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É')}
        >
          <BsCamera size={28} color="#fff" />
        </button>
        {/* –ì–∞–ª–µ—Ä–µ—è */}
        <button
          type="button"
          className="qr-icon-btn"
          onClick={() => fileInputRef.current.click()}
          aria-label={t('qr.gallery') || '–ì–∞–ª–µ—Ä–µ—è'}
          disabled={scanning}
        >
          <FiImage size={32} color={scanning ? '#888' : '#fff'} />
        </button>
        <input
          type="file"
          accept="image/*"
          ref={fileInputRef}
          onChange={handleFileChange}
          style={{ display: 'none' }}
        />
        {/* –ó–∞–∫—Ä—ã—Ç—å */}
        <button
          type="button"
          className="qr-icon-btn"
          onClick={() => navigate('/')}
          aria-label={t('common.close') || '–ó–∞–∫—Ä—ã—Ç—å'}
        >
          <RxCross2 size={32} color="#fff" />
        </button>
      </div>
    </div>
  );
};

export default QrScanner;
¬†