// src/App.jsx
import React, { useEffect, useState } from 'react';
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Link,
    Navigate,
    useLocation,
    useSearchParams,
    useNavigate
} from 'react-router-dom';

import QrScanner from './Components/QrScanner/QrScanner';
import WalletPage from './Components/WalletPage/WalletPage';
import './App.css';

import { Login, Me, TelegramInfo } from './utils/auth.js';
import { HiCreditCard } from 'react-icons/hi2';
import { TbTransfer } from 'react-icons/tb';
import { LuHistory } from 'react-icons/lu';
import { TbSettings2 } from 'react-icons/tb';
import Onboarding from './Components/OnBoarding/Onboarding.jsx';
import History from './Components/HistoryPage/History.jsx';
import Deposit from './Components/DepositPage/Deposit.jsx';
import WithdrawPage from './Components/WithdrawPage/WithdrawPage.jsx';
import Setting from './Components/Settings/Setting.jsx';
import UserAgreement from './Components/Settings/UserAgreement/UserAgreement.jsx';
import Exchange from './Components/Exchange/Exchange.jsx';
import ReferralPage from './Components/ReferralPage/ReferralPage.jsx';
import ReferralListPage from './Components/ReferralPage/ReferralListPage.jsx';
// import ReferralHandler from './Components/ReferralPage/ReferralHandler.jsx'; // –û–¢–ö–õ–Æ–ß–ï–ù: –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É
import Toast from './Components/UI/Toast.jsx';
import { PinProvider, usePin } from './pin/PinProvider.jsx';
import { registerByReferralCode } from './utils/referral';
import UnderConstruction from './Components/UnderConstruction';

function App() {
    const [userName, setUserName] = useState();
    const [telegramID, setTelegramID] = useState(null);
    const [onboardDone, setOnboardDone] = useState(null);
    const [isAuthChecking, setIsAuthChecking] = useState(true);
    const [isBlockedEnv, setIsBlockedEnv] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    const handleReferralCode = async (telegramId) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            const pendingRefCode = localStorage.getItem('pending_referral_code');
            console.log('[handleReferralCode] –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∫–æ–¥:', pendingRefCode);
            console.log('[handleReferralCode] telegramId:', telegramId);
            
            if (pendingRefCode && telegramId) {
                console.log('[handleReferralCode] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É —á–µ—Ä–µ–∑ –æ–±—â–∏–π API-—Å–ª–æ–π
                await registerByReferralCode(pendingRefCode);
                
                // –£–±–∏—Ä–∞–µ–º –∫–æ–¥ –∏–∑ localStorage
                localStorage.removeItem('pending_referral_code');
                console.log('[handleReferralCode] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', pendingRefCode);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ–± —É—Å–ø–µ—Ö–µ –° –õ–û–ì–ê–ú–ò
                // const successMessage = `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n–ö–æ–¥: ${pendingRefCode}\nTelegram ID: ${telegramId}\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
                // if (window.Telegram?.WebApp?.showAlert) {
                //     window.Telegram.WebApp.showAlert(successMessage);
                // } else {
                //     alert(successMessage);
                // }
            } else {
                // const debugMessage = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–¥\nPending –∫–æ–¥: ${pendingRefCode || '–ù–ï–¢'}\nTelegram ID: ${telegramId || '–ù–ï–¢'}\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
                console.log('[handleReferralCode] –ù–µ—Ç pending –∫–æ–¥–∞ –∏–ª–∏ telegramId');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º debug –∞–ª–µ—Ä—Ç
                // if (window.Telegram?.WebApp?.showAlert) {
                //     window.Telegram.WebApp.showAlert(debugMessage);
                // } else {
                //     alert(debugMessage);
                // }
            }
        } catch (error) {
            console.error('[handleReferralCode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ –° –õ–û–ì–ê–ú–ò
            // const errorMessage = `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n–û—à–∏–±–∫–∞: ${error.message}\nTelegram ID: ${telegramId || '–ù–ï–¢'}\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
            // if (window.Telegram?.WebApp?.showAlert) {
            //     window.Telegram.WebApp.showAlert(errorMessage);
            // } else {
            //     alert(errorMessage);
            // }
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    const handleOnboardingFinish = () => {
        console.log('[handleOnboardingFinish] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
        console.log('[handleOnboardingFinish] telegramID:', telegramID);
        console.log('[handleOnboardingFinish] pending –∫–æ–¥:', localStorage.getItem('pending_referral_code'));
        
        setOnboardDone(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        const pendingRefCode = localStorage.getItem('pending_referral_code');
        if (pendingRefCode && telegramID) {
            console.log('[handleOnboardingFinish] –ù–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
            handleReferralCode(telegramID);
        } else if (!pendingRefCode) {
            console.log('[handleOnboardingFinish] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ');
        } else {
            // –ï—Å–ª–∏ telegramID –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º debug
            // const debugMessage = `‚ö†Ô∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ telegramID –Ω–µ –Ω–∞–π–¥–µ–Ω\nTelegram ID: ${telegramID || '–ù–ï–¢'}\nPending –∫–æ–¥: ${localStorage.getItem('pending_referral_code') || '–ù–ï–¢'}\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
            console.log('[handleOnboardingFinish] –ù–µ—Ç telegramID');
            
            // if (window.Telegram?.WebApp?.showAlert) {
            //     window.Telegram.WebApp.showAlert(debugMessage);
            // } else {
            //     alert(debugMessage);
            // }
        }
    };

    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ Telegram Mini App –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        const tg = window?.Telegram?.WebApp;
        const platform = tg?.platform;
        if (!platform || (!["ios", "android"].includes(platform))) {
            setIsBlockedEnv(true);
            return;
        }
        // –í—Ä–µ–º–µ–Ω–Ω–æ: —É–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram WebView
        const startApp = tg?.initDataUnsafe?.start_param;
        console.log('[App] startApp –ø–∞—Ä–∞–º–µ—Ç—Ä:', startApp);
        console.log('[App] –ü–æ–ª–Ω—ã–µ initDataUnsafe:', tg?.initDataUnsafe);
        console.log(tg)
        
        if (startApp && startApp.startsWith('ref-')) {
            const referralCode = startApp.replace('ref-', '');
            console.log('[App] –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:', referralCode);
            localStorage.setItem('pending_referral_code', referralCode);
            console.log('[App] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —á—Ç–æ –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω
            // const codeReceivedMessage = `üì• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!\n–ö–æ–¥: ${referralCode}\n–ë—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
            // if (window.Telegram?.WebApp?.showAlert) {
            //     window.Telegram.WebApp.showAlert(codeReceivedMessage);
            // } else {
            //     alert(codeReceivedMessage);
            // }
        } else {
            console.log('[App] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ startApp');
        }
        
        // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram WebApp
        setTimeout(() => {
            const user = tg?.initDataUnsafe?.user;
            const InitDataTest = tg.initDataUnsafe;
            console.log("################")
            console.log(tg.initDataRaw)
            console.log("################")
            console.log(tg.initDataUnsafe)
            
            if (user) {
                const { id, first_name, last_name, username } = user;
                window?.Telegram?.WebApp?.setHeaderColor?.('#FFF001');
                window?.Telegram?.WebApp?.ready?.();
                setTelegramID(id);
                setUserName(`${first_name} ${last_name}`);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å user
                proceedWithAuth(id, username, first_name, last_name);
            } else {
                // Fallback: —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
                setIsAuthChecking(false);
                setOnboardDone(true);
            }
        }, 100);
    }, []);

    const proceedWithAuth = (id, username, first_name, last_name) => {

        Me(id)
            .then(() => {
                // If Me() executes successfully, skip onboarding
                setOnboardDone(true);
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                handleReferralCode(id);
                setIsAuthChecking(false);
            })
            .catch(err => {
                if (err?.status === 401 || err?.response?.status === 401) {
                    // New user - show onboarding (–ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É!)
                    console.log('[App] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
                    setOnboardDone(false);
                    setIsAuthChecking(false);
                } else {
                    // Any other error - show onboarding anyway
                    setOnboardDone(false);
                    console.error(err);
                    setIsAuthChecking(false);
                }
            });
    };


    // –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —ç–∫—Ä–∞–Ω –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –Ω–µ –≤ Telegram Mini App
    if (isBlockedEnv) {
        return (
            <div className="blocked-container">
                <div className="blocked-card">
                    <img src="/images/logo.png" alt="PlataPay" className="blocked-logo" />
                    <h1 className="blocked-title">–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram</h1>
                    <p className="blocked-text">
                        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –Ω–∞ iOS –∏–ª–∏ Android.
                    </p>
                    <a
                        className="btn-telegram"
                        href="https://t.me/PlataPay_bot"
                        target="_blank"
                        rel="noreferrer"
                    >
                        –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ @PlataPay_bot
                    </a>
                </div>
            </div>
        );
    }

    // –ü–æ–∫–∞ –∏–¥—ë—Ç –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
    if (isAuthChecking) {
        return null;
    }

    

    return (
        <PinProvider>
        <Router>
            <div className="background_shadow_drop" />
            <div className="app-wrapper">
                {/* <ReferralHandler /> - –û–¢–ö–õ–Æ–ß–ï–ù: –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ */}
                <Routes>
                    <Route
                        path="/onboarding"
                        element={<Onboarding  onFinish={handleOnboardingFinish} />}
                    />
                    <Route
                        path="/"
                        element={
                            onboardDone
                                ? <WalletPage  username={userName} />
                                : <Onboarding onFinish={handleOnboardingFinish} />
                        }
                    />
                    <Route path='/history' element={<History telegramID={telegramID}/>} />
                    <Route path="/scanner" element={<QrScanner telegramID={telegramID} />} />
                    <Route path='/deposit' element={<Deposit telegramID={telegramID}/>} />
                    <Route path='/withdraw' element={<UnderConstruction />} />
                    {/* <Route path='/withdraw' element={<WithdrawPage telegramID={telegramID}/>} /> */}

                    <Route path='/settings' element={<Setting/>} />
                    <Route path='/settings/user-agreement' element={<UserAgreement/>} />
                    <Route path='/exchange' element={<Exchange/>} />
                    <Route path='/referral' element={<ReferralPage />} />
                    <Route path='/referral/list' element={<ReferralListPage />} />

                </Routes>
                {onboardDone && <BottomNav />}
                <Toast />
            </div>
        </Router>
        </PinProvider>
    );
}

function BottomNav() {
    const location = useLocation();
    return (
        <>
        {location.pathname === '/scanner' || location.pathname === '/deposit' || location.pathname == "/x7k9m2p8/manual-pay" ? 
        (null)
        : (
        <nav className="bottom-nav">
            <Link to="/" className={location.pathname === '/' ? 'nav-link active' : 'nav-link'}>
                <HiCreditCard size={30} />
            </Link>
            <Link to="/exchange" className={location.pathname === '/exchange' ? 'nav-link active' : 'nav-link'}>
                <TbTransfer size={30} />
            </Link>
            <Link to="/history" className={location.pathname === '/history' ? 'nav-link active' : 'nav-link'}>
                <LuHistory size={30} />
            </Link>
            <Link to="/settings" className={location.pathname === '/settings' ? 'nav-link active' : 'nav-link'}>
                <TbSettings2 size={30} />
            </Link>
        </nav>
        )}
        </>


    );
}

export default App;

function AdminGuard({ children }) {
    const navigate = useNavigate();
    const [isAllowed, setIsAllowed] = React.useState(false);

    React.useEffect(() => {
        // –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if (sessionStorage.getItem('admin_access_granted') === 'true') {
            setIsAllowed(true);
            return;
        }

        const secretFromEnv = import.meta.env.VITE_ADMIN_KEY;
        const entered = window.prompt('–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ');

        if (!entered) {
            alert('–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É –æ—Ç–º–µ–Ω–µ–Ω');
            navigate('/');
            return;
        }

        if (entered === secretFromEnv) {
            sessionStorage.setItem('admin_access_granted', 'true');
            setIsAllowed(true);
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á');
            navigate('/');
        }
    }, [navigate]);

    if (!isAllowed) return null;
    return children;
}
